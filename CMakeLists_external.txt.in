cmake_minimum_required(VERSION 2.8)
project(externalLib)
include(ExternalProject)


#these should always be built and downloaded
ExternalProject_Add(
    sparsehash
    GIT_REPOSITORY https://github.com/sparsehash/sparsehash.git
    INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/sparsehash

    CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/sparsehash-prefix/src/sparsehash/autogen.sh COMMAND   ${CMAKE_BINARY_DIR}/lib/sparsehash-prefix/src/sparsehash/configure  CPPFLAGS=-D_XOPEN_SOURCE=1 --prefix=${CMAKE_BINARY_DIR}/lib/sparsehash
    UPDATE_COMMAND ""
    BUILD_COMMAND make -j10
    INSTALL_COMMAND make install
    BUILD_IN_SOURCE 1
    )

if(USE_TCMALLOC)
    ExternalProject_Add(
        gperftools
        GIT_REPOSITORY https://github.com/gperftools/gperftools
        INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/gperftools

        CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/gperftools-prefix/src/gperftools/autogen.sh COMMAND   ${CMAKE_BINARY_DIR}/lib/gperftools-prefix/src/gperftools/configure CPPFLAGS=-D_XOPEN_SOURCE=1 --prefix=${CMAKE_BINARY_DIR}/lib/gperftools 	    UPDATE_COMMAND ""
        BUILD_COMMAND make -j10
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
            )
endif()

ExternalProject_Add(
    eigen3
    URL http://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/eigen3 -DINCLUDE_INSTALL_DIR=${CMAKE_BINARY_DIR}/lib/eigen3
    UPDATE_COMMAND ""
    BUILD_COMMAND make -j10
    INSTALL_COMMAND make install
    BUILD_IN_SOURCE 0
    )

#for whatever reason, this has to use ${BUILD_VTK} and not BUILD_VTK otherwise it evaluates false.
if(${BUILD_VTK} OR SUPERBUILD )
    ExternalProject_Add(
	    VTK
	    URL http://www.vtk.org/files/release/8.0/VTK-8.0.0.tar.gz
	    UPDATE_COMMAND ""
	    #PATCH_COMMAND patch -p1  < ${CMAKE_BINARY_DIR}/vtk-8.0.0.patch
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/VTK -DCMAKE_BUILD_TYPE=Release
	    BUILD_COMMAND make -j10
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

#these are the -DSUPERBUILD=TRUE builds
if( SUPERBUILD)
    ExternalProject_Add(
	    boost
	    URL https://downloads.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.tar.gz
	    INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/boost
	    CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/bootstrap.sh --prefix="${CMAKE_BINARY_DIR}/lib/boost"
	    UPDATE_COMMAND ""
	    BUILD_COMMAND ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/b2 -j 10
	    INSTALL_COMMAND ./b2 install
	    BUILD_IN_SOURCE 1
	    )

    ExternalProject_Add(
	    gsl
	    URL ftp://ftp.gnu.org/gnu/gsl/gsl-2.4.tar.gz
	    CONFIGURE_COMMAND ./configure --prefix=${CMAKE_BINARY_DIR}/lib/gsl
	    UPDATE_COMMAND ""
	    BUILD_COMMAND make -j10
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1)

    ExternalProject_Add(
	    armadillo
	    URL http://sourceforge.net/projects/arma/files/armadillo-7.950.1.tar.xz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/armadillo
	    BUILD_COMMAND make -j10 
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )

    ExternalProject_Add(
	    ViennaCL
	    URL https://downloads.sourceforge.net/project/viennacl/1.7.x/ViennaCL-1.7.1.tar.gz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/ViennaCL -DENABLE_CUDA=OFF -DENABLE_OPENMP=ON -DBUILD_EXAMPLES=OFF
	    BUILD_COMMAND make -j10 
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )


    ExternalProject_Add(
	    CGAL
	    URL https://github.com/CGAL/cgal/releases/download/releases%2FCGAL-4.10/CGAL-4.10.tar.xz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/CGAL -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_ROOT=${CMAKE_BINARY_DIR}/lib/boost
	    BUILD_COMMAND make -j10 
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    DEPENDS boost
	    )
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_BINARY_DIR}/lib/CGAL/lib64/CGAL")

    ExternalProject_Add(
	    GDAL
	    URL http://download.osgeo.org/gdal/2.2.1/gdal-2.2.1.tar.gz
	    UPDATE_COMMAND ""
	    PATCH_COMMAND patch -p1 < ${CMAKE_BINARY_DIR}/gdal-2.2.1.patch
	    CONFIGURE_COMMAND ${CMAKE_BINARY_DIR}/lib/GDAL-prefix/src/GDAL/configure  --prefix=${CMAKE_BINARY_DIR}/lib/gdal
	    BUILD_COMMAND make -j10  
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )

    ExternalProject_Add(
    	proj4
        URL http://download.osgeo.org/proj/proj-4.8.0.tar.gz
        UPDATE_COMMAND ""
        CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/proj4-prefix/src/proj4/autogen.sh COMMAND ${CMAKE_BINARY_DIR}/lib/proj4-prefix/src/proj4/configure --prefix=${CMAKE_BINARY_DIR}/lib/proj4
        BUILD_COMMAND make -j10
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
    )

 endif()
